// NOTE: a lot of inspiration taken from https://noir-by-example.org/gadgets/zk-age-verification
use dep::std;

fn u16_to_u8_2(
    input: u16
) -> [u8; 2] {
    let mut output: [u8; 2] = [0; 2];
    for bit_pos in 0..2 {
        let shift_amount: u16 = 8 - (bit_pos * 8) as u16;
        output[bit_pos] = ((input >> shift_amount) & 255) as u8;
    }
    output
}

#[test]
fn test_u16_to_u8_2() {
    let expected: [u8; 2] = [ 0x07, 0xdf ];
    let actual: [u8; 2] = u16_to_u8_2(2015);
    assert(expected == actual);
}

fn construct_claim_payload(subject_eth_address: [u8; 20], subject_birth_year: u16) -> [u8; 32] {
    let mut packed_bytes: [u8; 22] = [0; 22];
    for i in 0..20 {
        packed_bytes[i] = subject_eth_address[i];
    }
    let birth_year_bytes = u16_to_u8_2(subject_birth_year);
    packed_bytes[20] = birth_year_bytes[0];
    packed_bytes[21] = birth_year_bytes[1];
    let hash = std::hash::keccak256(packed_bytes, 22);
    hash
}

#[test]
fn test_construct_claim() {
    let expected = [ 0x5a, 0xcf, 0x78, 0xe9, 0x1b, 0x88, 0xc3, 0x44, 0xe6, 0x5d, 0xed, 0xe6, 0xb0, 0x7d, 0x8a, 0xe5, 0x94, 0xdb, 0x81, 0xa2, 0x19, 0x2f, 0xad, 0x9b, 0x7d, 0x68, 0x37, 0xe4, 0x75, 0x98, 0x87, 0x3d ];
    let eth_address = [ 0x0a, 0x66, 0xfb, 0x34, 0xd3, 0x0c, 0x2b, 0x88, 0x9a, 0x12, 0xb1, 0xf8, 0x15, 0x73, 0xe4, 0x7f, 0x37, 0xde, 0x34, 0x0e ];
    let actual = construct_claim_payload(eth_address, 2015);
    assert(expected == actual);
}

fn check_valid_signature(
    issuer_public_key_x: [u8; 32],
    issuer_public_key_y: [u8; 32],
    subject_eth_address: [u8; 20],
    issuer_signed_message: [u8; 64],
    subject_birth_year: u16,
) -> bool {
    let claim_payload = construct_claim_payload(subject_eth_address, subject_birth_year);
    std::ecdsa_secp256k1::verify_signature(
      issuer_public_key_x,
      issuer_public_key_y,
      issuer_signed_message,
      claim_payload,
    )
}

#[test]
fn test_check_valid_signature() {
    let subject_eth_address: [u8; 20] = [0x50, 0x80, 0x7f, 0x51, 0xf8, 0x40, 0x94, 0x75, 0x6a, 0x9f, 0xbb, 0x50, 0x27, 0x5c, 0x5d, 0xb8, 0x82, 0xB2, 0xC5, 0x22 ];
    let issuer_public_key_x: [u8; 32] = [ 0xba, 0x57, 0x34, 0xd8, 0xf7, 0x09, 0x17, 0x19, 0x47, 0x1e, 0x7f, 0x7e, 0xd6, 0xb9, 0xdf, 0x17, 0x0d, 0xc7, 0x0c, 0xc6, 0x61, 0xca, 0x05, 0xe6, 0x88, 0x60, 0x1a, 0xd9, 0x84, 0xf0, 0x68, 0xb0 ];
    let issuer_public_key_y: [u8; 32] = [ 0xd6, 0x73, 0x51, 0xe5, 0xf0, 0x60, 0x73, 0x09, 0x24, 0x99, 0x33, 0x6a, 0xb0, 0x83, 0x9e, 0xf8, 0xa5, 0x21, 0xaf, 0xd3, 0x34, 0xe5, 0x38, 0x07, 0x20, 0x5f, 0xa2, 0xf0, 0x8e, 0xec, 0x74, 0xf4 ];
    let issuer_signed_message: [u8; 64] = [0x6f, 0x89, 0xe4, 0x74, 0x39, 0x01, 0x93, 0x6f, 0x00, 0x57, 0xad, 0x42, 0xcc, 0x91, 0xe0, 0x63, 0xba, 0xa5, 0xf5, 0xb9, 0xaf, 0xa0, 0x24, 0x6b, 0xdd, 0x9f, 0xc4, 0x6c, 0x7f, 0x3d, 0x10, 0x87, 0x36, 0x42, 0x03, 0x28, 0x94, 0x90, 0x96, 0x83, 0x0b, 0xdb, 0x5c, 0x21, 0xc7, 0xba, 0xc0, 0xbd, 0xd7, 0xc4, 0xed, 0xcf, 0x99, 0x4e, 0x06, 0x0d, 0xa9, 0x60, 0x09, 0xaa, 0x8d, 0x46, 0x2a, 0xc3 ];
    let subject_birth_year: u16 = 2014;

    let res = check_valid_signature(
      issuer_public_key_x,
      issuer_public_key_y,
      subject_eth_address,
      issuer_signed_message,
      subject_birth_year,
    );
    assert(res);
}

#[test]
fn test_check_invalid_signature() {
    let subject_eth_address: [u8; 20] = [0x50, 0x80, 0x7f, 0x51, 0xf8, 0x40, 0x94, 0x75, 0x6a, 0x9f, 0xbb, 0x50, 0x27, 0x5c, 0x5d, 0xb8, 0x82, 0xB2, 0xC5, 0x22 ];
    let issuer_public_key_x: [u8; 32] = [ 0xba, 0x57, 0x34, 0xd8, 0xf7, 0x09, 0x17, 0x19, 0x47, 0x1e, 0x7f, 0x7e, 0xd6, 0xb9, 0xdf, 0x17, 0x0d, 0xc7, 0x0c, 0xc6, 0x61, 0xca, 0x05, 0xe6, 0x88, 0x60, 0x1a, 0xd9, 0x84, 0xf0, 0x68, 0xb0 ];
    let issuer_public_key_y: [u8; 32] = [ 0xd6, 0x73, 0x51, 0xe5, 0xf0, 0x60, 0x73, 0x09, 0x24, 0x99, 0x33, 0x6a, 0xb0, 0x83, 0x9e, 0xf8, 0xa5, 0x21, 0xaf, 0xd3, 0x34, 0xe5, 0x38, 0x07, 0x20, 0x5f, 0xa2, 0xf0, 0x8e, 0xec, 0x74, 0xf4 ];
    let invalid_issuer_signed_message: [u8; 64] = [0xaa, 0xaa, 0xe4, 0x74, 0x39, 0x01, 0x93, 0x6f, 0x00, 0x57, 0xad, 0x42, 0xcc, 0x91, 0xe0, 0x63, 0xba, 0xa5, 0xf5, 0xb9, 0xaf, 0xa0, 0x24, 0x6b, 0xdd, 0x9f, 0xc4, 0x6c, 0x7f, 0x3d, 0x10, 0x87, 0x36, 0x42, 0x03, 0x28, 0x94, 0x90, 0x96, 0x83, 0x0b, 0xdb, 0x5c, 0x21, 0xc7, 0xba, 0xc0, 0xbd, 0xd7, 0xc4, 0xed, 0xcf, 0x99, 0x4e, 0x06, 0x0d, 0xa9, 0x60, 0x09, 0xaa, 0x8d, 0x46, 0x2a, 0xc3 ];
    let subject_birth_year: u16 = 2014;

    let res = check_valid_signature(
      issuer_public_key_x,
      issuer_public_key_y,
      subject_eth_address,
      invalid_issuer_signed_message,
      subject_birth_year,
    );
    assert(!res);
}

#[test]
fn test_check_different_birth_year() {
    let subject_eth_address: [u8; 20] = [0x50, 0x80, 0x7f, 0x51, 0xf8, 0x40, 0x94, 0x75, 0x6a, 0x9f, 0xbb, 0x50, 0x27, 0x5c, 0x5d, 0xb8, 0x82, 0xB2, 0xC5, 0x22 ];
    let issuer_public_key_x: [u8; 32] = [ 0xba, 0x57, 0x34, 0xd8, 0xf7, 0x09, 0x17, 0x19, 0x47, 0x1e, 0x7f, 0x7e, 0xd6, 0xb9, 0xdf, 0x17, 0x0d, 0xc7, 0x0c, 0xc6, 0x61, 0xca, 0x05, 0xe6, 0x88, 0x60, 0x1a, 0xd9, 0x84, 0xf0, 0x68, 0xb0 ];
    let issuer_public_key_y: [u8; 32] = [ 0xd6, 0x73, 0x51, 0xe5, 0xf0, 0x60, 0x73, 0x09, 0x24, 0x99, 0x33, 0x6a, 0xb0, 0x83, 0x9e, 0xf8, 0xa5, 0x21, 0xaf, 0xd3, 0x34, 0xe5, 0x38, 0x07, 0x20, 0x5f, 0xa2, 0xf0, 0x8e, 0xec, 0x74, 0xf4 ];
    let issuer_signed_message: [u8; 64] = [0x6f, 0x89, 0xe4, 0x74, 0x39, 0x01, 0x93, 0x6f, 0x00, 0x57, 0xad, 0x42, 0xcc, 0x91, 0xe0, 0x63, 0xba, 0xa5, 0xf5, 0xb9, 0xaf, 0xa0, 0x24, 0x6b, 0xdd, 0x9f, 0xc4, 0x6c, 0x7f, 0x3d, 0x10, 0x87, 0x36, 0x42, 0x03, 0x28, 0x94, 0x90, 0x96, 0x83, 0x0b, 0xdb, 0x5c, 0x21, 0xc7, 0xba, 0xc0, 0xbd, 0xd7, 0xc4, 0xed, 0xcf, 0x99, 0x4e, 0x06, 0x0d, 0xa9, 0x60, 0x09, 0xaa, 0x8d, 0x46, 0x2a, 0xc3 ];
    let other_birth_year: u16 = 2017;

    let res = check_valid_signature(
      issuer_public_key_x,
      issuer_public_key_y,
      subject_eth_address,
      issuer_signed_message,
      other_birth_year,
    );
    assert(!res);
}

fn main(
    required_birth_year: pub u16,
    issuer_public_key_x: pub [u8; 32],
    issuer_public_key_y: pub [u8; 32],
    subject_eth_address: pub [u8; 20],

    issuer_signed_message: [u8; 64],
    subject_birth_year: u16,
) {
    let is_birth_year_greater = subject_birth_year > required_birth_year;
    assert(is_birth_year_greater);
    let is_valid_signature = check_valid_signature(
      issuer_public_key_x,
      issuer_public_key_y,
      subject_eth_address,
      issuer_signed_message,
      subject_birth_year
    );
    assert(is_valid_signature);
}

#[test]
fn test_main() {
    let required_birth_year: u16 = 2013;
    let subject_eth_address: [u8; 20] = [0x50, 0x80, 0x7f, 0x51, 0xf8, 0x40, 0x94, 0x75, 0x6a, 0x9f, 0xbb, 0x50, 0x27, 0x5c, 0x5d, 0xb8, 0x82, 0xB2, 0xC5, 0x22 ];
    let issuer_public_key_x: [u8; 32] = [ 0xba, 0x57, 0x34, 0xd8, 0xf7, 0x09, 0x17, 0x19, 0x47, 0x1e, 0x7f, 0x7e, 0xd6, 0xb9, 0xdf, 0x17, 0x0d, 0xc7, 0x0c, 0xc6, 0x61, 0xca, 0x05, 0xe6, 0x88, 0x60, 0x1a, 0xd9, 0x84, 0xf0, 0x68, 0xb0 ];
    let issuer_public_key_y: [u8; 32] = [ 0xd6, 0x73, 0x51, 0xe5, 0xf0, 0x60, 0x73, 0x09, 0x24, 0x99, 0x33, 0x6a, 0xb0, 0x83, 0x9e, 0xf8, 0xa5, 0x21, 0xaf, 0xd3, 0x34, 0xe5, 0x38, 0x07, 0x20, 0x5f, 0xa2, 0xf0, 0x8e, 0xec, 0x74, 0xf4 ];
    let issuer_signed_message: [u8; 64] = [0x6f, 0x89, 0xe4, 0x74, 0x39, 0x01, 0x93, 0x6f, 0x00, 0x57, 0xad, 0x42, 0xcc, 0x91, 0xe0, 0x63, 0xba, 0xa5, 0xf5, 0xb9, 0xaf, 0xa0, 0x24, 0x6b, 0xdd, 0x9f, 0xc4, 0x6c, 0x7f, 0x3d, 0x10, 0x87, 0x36, 0x42, 0x03, 0x28, 0x94, 0x90, 0x96, 0x83, 0x0b, 0xdb, 0x5c, 0x21, 0xc7, 0xba, 0xc0, 0xbd, 0xd7, 0xc4, 0xed, 0xcf, 0x99, 0x4e, 0x06, 0x0d, 0xa9, 0x60, 0x09, 0xaa, 0x8d, 0x46, 0x2a, 0xc3 ];
    let subject_birth_year: u16 = 2014;

    main(
      required_birth_year,
      issuer_public_key_x,
      issuer_public_key_y,
      subject_eth_address,
      issuer_signed_message,
      subject_birth_year,
    );
}
